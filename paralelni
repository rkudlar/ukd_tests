1. 	Під паралельними обчисленнями розуміють:
●  процеси вирішення задач, в яких в один і той же момент часу можуть виконуватися одночасно декілька обчислювальних операцій

2. 	Для досягнення паралелізму повинна виконуватися наступна вимога:
●  незалежність функціонування окремих пристроїв ЕОМ

3. 	Однією із найбільш поширених класифікацій обчислювальних систем є:
●  класифікація М. Флінна

4. 	Мультипроцесорні системи характеризуються наступною властивістю:
●  кожен із процесорів має доступ до адресного простору іншого процесора

5. 	Мультикомп`ютерні системи характеризуються наступною властивістю:
●  процесори об`єднані між собою за допомогою комунікаційного середовища

6. 	Під терміном "комп`ютерний кластер" розуміють:
●  декілька незалежних обчислювальних машин, що використовуються спільно і працюють як одна система для вирішення певних задач

7. 	Для метакомп`ютера притаманними є наступні особливості:
●  усе із переліченого

8. 	Декомпозиція задачі – це:
●  процес розбиття прикладної задачі на частини

9. 	Під час проектування та написання паралельних програм підхід на основі ітеративного паралелізму використовується:
●  для реалізації декількох процесів (часто ідентичних), кожен з яких включає в себе цикли

10.  Під час проектування та написання паралельних програм підхід на основі рекурсивного паралелізму використовується:
●  для написання програм з однією або декількома рекурсивними процедурами, виклик яких є незалежним

11.  Під час проектування та написання паралельних програм модель "виробники та споживачі" використовується:
●  для написання програм в основі яких використовуються взаємодіючі нерівноправні процеси

12.  Під час проектування та написання паралельних програм модель "Клієнти та сервери" використовується:
●  для реалізації моделі взаємодії у клієнт-серверних розподілених системах

13.  Під час проектування та написання паралельних програм модель "Керівник та робітники" використовується:
●  для організації обчислень, при яких існує потік, що координує роботу всіх інших потоків

14.  Під час проектування та написання паралельних програм модель "Взаємодіючі рівноправні" використовується:
●  для виключення керуючого потоку, що не займається безпосередніми обчисленнями

15.  Дрібномодульна неподільна дія – це:
●  дія, що реалізується безпосередньо апаратним забезпеченням, на якому виконується програма

16.  Для вирішення задачі критичної секції використовується:
●  принцип взаємного виключення і умовна синхронізація

17.  Об`єкт взаємного виключення під назвою mutex - це:
●  простий двійковий семафор, який може перебувати в одному з двох станів (сигнальному або несигнальному)

18.  Синхронізація у паралельних програмах використовується для:
●  захисту критичних секцій коду від одночасного доступу до них з різних потоків

19.  У паралельному програмуванні семафор – це:
●  особливий вид спільної змінної, яка використовується для синхронізації потоків і значенням якої може бути будь-яке додатне число

20.  У паралельному програмуванні монітор – це:
●  програмний модуль, що містить змінні, які зберігають стан об`єкта і використовується для синхронізації потоків

21.  Що таке критична секція у термінах паралельної програми?
●  послідовність операторів, що мають доступ до деякого спільного об`єкту

22.  За якої умови два процеси не впливають один на одного?
●  якщо множина запису одного процесу не перетинається з множиною посилань іншого процесу і навпаки

23.  Алгоритм квитка у паралельних обчисленнях використовується для:
●  вирішення задачі критичної секції

24.  Алгоритм поліклініки у паралельних обчисленнях використовується для:
●  вирішення задачі критичної секції

25.  За яких умов паралельна програма переходить у стан гонок?
●  якщо робота системи чи результат операції залежить від того, в якій послідовності виконуються окремі інструкції коду

26.  Задача про виробників та споживачів описує проблему пов'язану з:
●  між потоковою взаємодією в межах критичної секції коду

27.  Кільцеві буфера у паралельних обчисленнях використовуються для:
●  підвищення продуктивності програми, шляхом зменшення числа блокувань процесів.

28.  Задача про філософів, що обідають описує проблему пов`язану з:
●  синхронізованим доступом декількох процесів до спільних ресурсів

29.  У чому полягає суть взаємного блокування процесів?
●  це стан у якому усі процеси виявляються заблокованими і не має процесу який би міг послати сигнал дня розблокування

30.  Згідно із законом Джина Амдала:
●  прискорення виконання програми за рахунок розпаралелювання її інструкцій на необмеженій кількості процесорів обмежене часом, необхідним для виконання її послідовних інструкцій

31.  Щоб запустити у Java потік на виконання потрібно:
●  Потрібно ввести команду run (start)
32.  Код, що має бути виконаний у новому потоці у Java потрібно:
●  Записати в метод run()

33.  Як у Java можна призупинити виконання потоку на заданий проміжок часу?
●  Команда sleep
34.  Чим у Java відрізняється звичайний потік від потоку демона?
●  Демон потік завершується після закінчення останнього потоку не демона

35.  Які існують способи створення нового потоку засобами мови Java?
●  шляхом розширення класу Thread. Цей клас є основним класом, на якому побудована багатопотокова система Java. Клас Thread визначає один потік виконання. Якщо в програмі потрібно створити три потоки виконання, то, відповідно, створюється три екземпляри класу Thread;
з допомогою реалізації інтерфейсу Runnable. Інтерфейс Runnable доповнює можливості класу Thread
Створення потоку на основі анонімних класів
З допомогою лямбда виразів


36.  Яке призначення методу run() з інтерфейсу Runnable?
●  Метод run() містить дії, які повинні виконуватися в новому потоці виконання.
37.  Чому під час створення нового потоку необхідно надавати перевагу реалізації інтерфейсу Runnable, а не наслідуванню від класу Thread?
●  Новий клас, який розширює клас Thread, повинен перевизначити метод метод run(), який є вхідною точкою для нового потоку.
Зазвичай, коли необхідно, щоб даний клас був розширенням деякого іншого класу і в ньому необхідно реалізувати потоки, попередній підхід не не найкраще рішення для створення потоку, оскільки, в мові Java немає підтримки множинного наслідування. Для вирішення цієї проблеми для даного класу потрібно реалізувати інтерфейс Runnable,
38.  Яким чином запустити створений потік на виконання?
●  Команда start
39.  Як можна згрупувати декілька потоків між собою?
●  За допомогою класу ThreadGroup

40.  Яку функціональну роль відіграє головний потік у мові Java?
●  Головний потік є важливим з двох причин:
1) від даного потоку породжуються всі «дочірні» потоки;
2) часто він повинен бути останнім потоком, що завершує виконання
програми, оскільки може виконувати різні завершальні дії.

41.  У яких станах можуть перебувати потоки у мові Java?
●  New, Running, Timed waiting, Waiting, Blocked, Terminated
42.  Яким чином можна дізнатися поточний стан потоку?
●  Команда getState()
43.  Яким чином можна призупинити виконання певного потоку на вказаний проміжок часу?
●  Thread.sleep
44.  У якому випадку може бути згенерований виняток InterruptEdexception?
●  Якщо потік в даний момент заблокований викликом
методу sleep(), то генерується виняток типу InterruptedException.
При цьому стан переривання потоку встановлюється
рівним значенню true.

45.  Яким чином зробити так, щоб певний потік гарантовано завершив своє виконання останнім?
●  метод join(), який гарантує, що головний по-
тік завершиться останнім.


46.  Як можна перевірити, чи певний потік ще не завершив своє виконання?
●  За допомогою методу IsAlive()
47.  У яких випадках може бути корисним використання методу yield()?
●  Коли потрібно звільнити процесор для того щоб інші потоки мали можливість виконуватись.
48.  Виклик методу yield() із об`єкта потоку призводить до:
●  Того що потік покине монітор (обʼєкт)
49.  Як можна змінити пріоритет потоку у програмі?
●  Для встановлення пріоритету потоку, використовується визначений у класі Thread метод setPriority().

50.  Які значення є коректними під час задання пріоритету потоку?
●  цілочисельне значення
51.  Яке значення рівня пріоритету мають потоки по замовчуванню?
●  За замовчуванням потік має стандартний пріоритет 5
52.  Який потік називається потоком-демоном?
●  Потоки, що працюють у фоновому режимі,
виконуючи певні допоміжні функції. Такий допоміжний потік можна
помітити як потік-демон

53.  Для створення потоку-демона потрібно:
●  Необхідно викликати метод setDaemon()
54.  Що таке “монітор” у термінології потоків мови Java?
●  Монітор у мові Java – це об’єкт, який використовується, як взаємовиключне блокування (mutually exclusive lock), або м’ютекс.

55.  Які у Java існують механізми захисту критичної секції коду від паралельного доступу?
●  У мові Java існує два механізми для захисту критичної секції коду від
паралельного доступу. Один із них полягає у використанні ключового слова synchronized, а інший – у використанні класу ReentrantLock, який реалізує інтерфейс Lock

56.  Який вид блокування називається реентерабельный?
●  вид блокування називається реентерабельним, оскільки
потік може повторно захоплювати блокування, яким він уже володіє. Для кожного блокування передбачений лічильник захоплень, що відслідковує вкладені виклики методу lock().


57.  Для блокування потоку через об`єкт класу ReentrantLock потрібно:
●  lock()
58.  Для розблокування потоку через об`єкт класу ReentrantLock потрібно:
●  unlock()
59.  Яке призначення ключового слова synchronized у мові Java?
●  У мові Java існує два механізми для захисту критичної секції коду від паралельного доступу. Один із них полягає у використанні ключового слова synchronized (дозволяє заблокувати доступ до методу або частини коду)

60.  Які методи дозволяється оголошувати із ключовим словом synchronized?
●  Окрім звичайних методів, допускається оголошувати синхронізованими також і статичні методи.
61.  Яке обмеження притаманне вбудованим блокуванням у мові Java?
1. Не можливо перервати потік, який намагається захопити блокування.
2. Не можливо вказати час очікування, намагаючись захопити
блокування.

62.  Яким чином можна оголосити синхронізований блок засобами мови Java?
●  Потрібно при оголошені методу вписати модифікатор synchronized
63.  У яких випадках доцільніше для синхронізації використовувати об'єкти типу ReentrantLock?
●  Об’єкти типу Lock необхідно використовувати тільки у тому
випадку, якщо дійсно потрібні додаткові механізми керування процесом синхронізації.

64.  Які існують механізми між потокових комунікацій у мові Java?
●  Раніше для періодичної перевірки деякої умови використовувався
механізм на основі опитувань, що зазвичай реалізуються у вигляді вічного циклу. З метою уникнення опитувань, мова Java реалізує елегантний механізм між потокових комунікацій з використанням методів wait(), notify() та notifyAll().


65.  Яким чином виконується між потокова комунікація з використання неявного монітора об`єкта?

66.  Яким чином виконується між потокова комунікація з використанням високорівневих методів взаємодії між потоками?
●  wait(), notify() та notifyAll().
67.  Яка існує відмінність у виклику методів signal() та signalAll()?
●  Метод signal() сигналізує що потік в якому він був викликаний може продовжити роботу signalAll()  сигналізує всім потокам в яких він задіяний можуть продовжити свою роботу в методі wait()
68.  Яка існує відмінність у виклику методів notify() та notifyAll()?
●  метод notify() продовжує роботу певного потоку де він задіяний а notifyAll() відновлює роботу усіх потоків два методи повинні бути задіяні в методі wait()
69.  У яких випадках рекомендується перевизначити методи wait() та notify() з класу Object?
●  Якщо синхронізований доступ надається з одного потоку
70.  Для створення умовних об`єктів типу Condition використовується:
●  фабричний метод newCondition().

71.  Який режим синхронізованого доступу до спільних даних називається не блокуючим?
●  На основі синхронізації процеси класифікуються як один із наступних двох типів:
Незалежний процес : виконання одного процесу не впливає на виконання інших процесів.
Кооперативний процес : процес, який може впливати на інші процеси, що виконуються в системі, або на який можуть впливати інші процеси, що виконуються в системі.

72.  У яких випадках використовуються оператор volatile?
●  volatile - використовується для встановлення не блокуючого режиму синхронізованого доступу до поля класу. У випадку, коли поле класу оголошене із модифікатором volatile, то компілятор і віртуальна машина враховують той факт, що значення поля може бути паралельно модифіковане в іншому потоці.

73.  У яких випадках у багатопотокових програмах рекомендується використовувати оператор final?
●  Щоб отримати надійний доступ до спільного поля з декількох потоків є використання ключового поля final.

74.  У чому полягає перевага використання пулу потоків?
●  Пул потоків гарантує, що потік не буде втрачено і допомагає
збалансувати програмний додаток за кількістю потоків і частоті їх створення.


75.  Як у Java можна створити пул потоків?
●  ExecutorService service = Executors.newFixedThreadPool();
76.  Яка відмінність між способами створення потоків з використанням інтерфейсів Runnable и Callable?
●  Callable – це також функціональний інтерфейс, але на відміну від Runnable, його метод call() може повертати значення.

77.  Яке призначення методу call() з інтерфейсу Callable?
●  метод call() може повертати значення.
78.  Яким чином передати пулу потоків на виконання список задач?
●  за допомогою методу invokeAll()
79.  У яких випадках необхідне використання планувальників задач?
●  Для асинхронізації колекціїї робочих процесів по виклику по імені додатку.Пул потоків в основному використовується для зменшення кількості потоків програми та управління робочими потоками.

80.  Закон Джина Амдала в паралельних обчисленнях використовується для:
●  Закон Амдальса також відомий як аргумент Амдала. Він використовується для пошуку максимального очікуваного поліпшення загальної системи, коли вдосконалюється лише частина системи. Він часто використовується в паралельних обчисленнях для прогнозування теоретичної максимальної швидкості за допомогою декількох процесорів.
